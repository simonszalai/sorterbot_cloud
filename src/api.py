"""
A Flask application to expose the `/process_image` REST API endpoint.

"""

import os
import json
import traceback
from flask import Flask, Response, request

from main import Main
from utils.helpers import is_session_id_invalid
from utils.logger import logger

app = Flask(__name__)
main = Main(base_img_path=os.path.abspath(os.path.join(os.path.abspath(__file__), "../../images")))


@app.route("/process_image", methods=["POST"])
def process_image():
    """
    This endpoint exposes image processing functionality.

    Parameters
    ----------
    session_id : str
        Datetime based unique identifier of the current session. It is generated by the Raspberry Pi and passed
        with the POST request.
    image_name : str
        Name of the image to be processed. The image has to be uploaded to the s3 bucket. Value is passed
        with the POST request.
    is_final : bool
        Boolean value indicating if the current image is the last of the session. If it is, all of the session's
        images will be cropped, vectorized and clustered.

    """

    try:
        # Retrieve query parameters from the request
        session_id = request.args.get("session_id")
        image_name = request.args.get("image_name")
        arm_id = "ARM1"

        sess_id_invalid = is_session_id_invalid(session_id)
        if sess_id_invalid:
            raise Exception(f"Session ID ({session_id}) is invalid: {sess_id_invalid}")

        # Detect objects on image and save bounding boxes to the database
        main.process_image(arm_id=arm_id, session_id=session_id, image_name=image_name)

        return Response(
            json.dumps({
                "session_id": session_id,
                "image_name": image_name,
                "message": "Image successfully processed!"
            }),
            status=200,
            mimetype='application/json'
        )
    except Exception as e:
        logger.error(e)
        return Response(json.dumps({"result": e}), status=500, mimetype='application/json')


@app.route("/get_commands_of_session", methods=["POST"])
def get_commands_of_session():
    """

    """

    try:
        # Retrieve query parameters from the request
        session_id = request.args.get("session_id")
        arm_id = "ARM1"

        sess_id_invalid = is_session_id_invalid(session_id)
        if sess_id_invalid:
            raise Exception(f"Session ID ({session_id}) is invalid: {sess_id_invalid}")

        commands = main.vectorize_session_images(arm_id=arm_id, session_id=session_id)

        return Response(json.dumps(commands), status=200, mimetype='application/json')

    except Exception as e:
        # logger.error(e)
        traceback.print_exc()
        return Response(json.dumps({"result": e}), status=500, mimetype='application/json')


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=6000, debug=True)
